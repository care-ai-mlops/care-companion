{{- $ns := "kube-system" }}         
{{- $name := "csi-rclone" }}
{{- $values := .Values.csiRclone }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}-config
  namespace: {{ $ns }}
type: Opaque
stringData:
  rclone.conf: |
{{ $values.rcloneConf | indent 4 }}

---
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: csi.rclone.org
spec:
  attachRequired: false
  podInfoOnMount: true

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ $name }}
  namespace: {{ $ns }}


---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ $name }}
rules:
  - apiGroups: [""]
    resources: [pods, nodes, persistentvolumes, events, persistentvolumeclaims]
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: ["storage.k8s.io"]
    resources: [csinodes, storageclasses, volumeattachments, volumeattachments/status]
    verbs: [get, list, watch, create, update, patch]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: [get, create, update]
  
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ $name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ $name }}
subjects:
  - kind: ServiceAccount
    name: {{ $name }}
    namespace: {{ $ns }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}-controller
  namespace: {{ $ns }}
  labels: { app: {{ $name }}, role: controller }
spec:
  replicas: 1
  selector:
    matchLabels: { app: {{ $name }}, role: controller }
  template:
    metadata:
      labels: { app: {{ $name }}, role: controller }
    spec:
      serviceAccountName: {{ $name }}
      containers:
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v4.0.0
          args: 
          - "--csi-address=${ADDRESS}"
          -  "--extra-create-metadata"
          -  "--v=2"
          env:
            - { name: ADDRESS, value: /csi/csi.sock }
          volumeMounts:
            - { name: socket-dir, mountPath: /csi }
        - name: csi-rclone
          image: {{ $v.image }}
          args:
            - "--endpoint=unix:///csi/csi.sock"
            - "--drivername=csi.rclone.org"
          env:
            - { name: RCLONE_CONFIG, value: /etc/rclone/rclone.conf }
          volumeMounts:
            - { name: socket-dir, mountPath: /csi }
            - { name: config, mountPath: /etc/rclone }
      volumes:
        - { name: socket-dir, emptyDir: {} }
        - { name: config, secret: { secretName: {{ $name }}-config } }

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ $name }}-node
  namespace: {{ $ns }}
  labels: { app: {{ $name }}, role: node }
spec:
  selector:
    matchLabels: { app: {{ $name }}, role: node }
  template:
    metadata:
      labels: { app: {{ $name }}, role: node }
    spec:
      serviceAccountName: {{ $name }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
        - name: node-driver-registrar
          image: k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.4.0
          lifecycle:
            preStop:
              exec:
                command:
                - "/bin/sh"
                -  "-c"
                -  "rm -rf /registration/csi-rclone /registration/csi-rclone-reg.sock"
          args:
          - "--v=1" 
          - "--csi-address=/plugin/csi.sock" 
          - --kubelet-registration-path=/var/lib/kubelet/plugins/csi-rclone/csi.sock
          env:
            - { name: KUBE_NODE_NAME, valueFrom: { fieldRef: { fieldPath: spec.nodeName } } }
          volumeMounts:
            - { name: plugin-dir, mountPath: /plugin }
            - { name: registration-dir, mountPath: /registration }
        - name: csi-rclone
          image: wunderio/csi-rclone:v3.0.0
          securityContext:
            privileged: true
            capabilities: {add: ["SYS_ADMIN"]}
            args:
            - "--endpoint=unix:///plugin/csi.sock"
            - "--drivername=csi.rclone.org"
            - "--nodeid=$(NODE_NAME)"
          env:
            - { name: NODE_NAME, valueFrom: { fieldRef: { fieldPath: spec.nodeName } } }
            - { name: RCLONE_CONFIG, value: /etc/rclone/rclone.conf }
          volumeMounts:
            - { name: plugin-dir, mountPath: /plugin }
            - { name: pods-mount-dir, mountPath: /var/lib/kubelet/pods, mountPropagation: Bidirectional }
            - { name: config, mountPath: /etc/rclone }
      volumes:
        - { name: plugin-dir, hostPath: { path: /var/lib/kubelet/plugins/csi.rclone.org, type: DirectoryOrCreate } }
        - { name: registration-dir, hostPath: { path: /var/lib/kubelet/plugins_registry, type: DirectoryOrCreate } }
        - { name: pods-mount-dir, hostPath: { path: /var/lib/kubelet/pods, type: Directory } }
        - { name: config, secret: { secretName: {{ $name }}-config } }


---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: rclone
provisioner: csi.rclone.org
reclaimPolicy: Retain
volumeBindingMode: Immediate
parameters:
  remote: {{ $values.remoteName }}
  container: {{ $values.container }}           
  mountOptions: "--allow-other --vfs-cache-mode writes"\
  pathPattern: "${PVC.namespace}/${PVC.annotations.csi-rclone.org/storage-path}"
