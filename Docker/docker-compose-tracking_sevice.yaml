name: tracking_service
services:
  minio:
    image: minio/minio
    container_name: minio
    restart: always
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: "your-access-key"
      MINIO_ROOT_PASSWORD: "your-secret-key"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    volumes:
      - /mnt/block/minio_data:/data
    networks:
      - tracking_network

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 your-access-key your-secret-key &&
      if ! mc ls minio/mlflow-artifacts; then
        mc mb minio/mlflow-artifacts &&
        echo 'Bucket mlflow-artifacts created'
      else
        echo 'Bucket mlflow-artifacts already exists';
      fi &&
      if ! mc ls minio/ray; then
        mc mb minio/ray &&
        echo 'Bucket ray created'
      else
        echo 'Bucket ray already exists';
      fi"
    networks:
      - tracking_network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mlflowdb
    ports:
      - "5432:5432"
    volumes:
      - /mnt/block/postgres_data:/var/lib/postgresql/data
    networks:
      - tracking_network

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.20.2
    container_name: mlflow
    restart: always
    depends_on:
      - minio
      - postgres
      - minio-create-bucket
    environment:
      MLFLOW_TRACKING_URI: http://0.0.0.0:8000
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: "your-access-key"
      AWS_SECRET_ACCESS_KEY: "your-secret-key"
    ports:
      - "8000:8000"
    command: >
      /bin/sh -c "pip install psycopg2-binary boto3 &&
      mlflow server --backend-store-uri postgresql://user:password@postgres/mlflowdb
      --artifacts-destination s3://mlflow-artifacts/ --serve-artifacts --host 0.0.0.0 --port 8000"
    networks:
      - tracking_network

  prometheus-init:
    image: busybox
    container_name: prometheus-init
    command: ["sh", "-c", "chown -R 65534:65534 /prometheus"]
    volumes:
      - /mnt/block/prometheus_data:/prometheus
    networks:
      - tracking_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "65534:65534"  # nobody:nogroup
    volumes:
      - /mnt/block/prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    # environment:
    #   - CHI_FLOATING_IP=${CHI_FLOATING_IP}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 5s
    restart: unless-stopped
    networks:
      - tracking_network
    depends_on:
      - prometheus-init

  ray-head:
    image: rayproject/ray:2.42.1
    container_name: ray-head
    command: |
      /bin/sh -c "
      mkdir -p /tmp/ray &&
      chown -R root:root /tmp/ray &&
      ray start --head --port=6379 --ray-client-server-port=10001 --dashboard-host=0.0.0.0 --block --metrics-export-port=8080"
    ports:
      - "6379:6379"
      - "8265:8265"
      - "8080:8080"
      - "8090:8090"
      - "10001:10001"
    shm_size: '12g'
    volumes:
      - /mnt/block/ray_tmp:/tmp/ray
    environment:
      - RAY_GRAFANA_HOST=http://grafana:3000
      - RAY_GRAFANA_IFRAME_HOST=http://129.114.25.207:3000
      - RAY_PROMETHEUS_HOST=http://prometheus:9090
      - RAY_PROMETHEUS_NAME=Prometheus
      - RAY_DASHBOARD_HOST=0.0.0.0
      - RAY_DASHBOARD_PORT=8265
      - RAY_METRICS_EXPORT_PORT=8080
      - RAY_METRICS_GRAFANA_ENABLED=true
      - AWS_ACCESS_KEY_ID=your-access-key
      - AWS_SECRET_ACCESS_KEY=your-secret-key
      - AWS_ENDPOINT_URL=http://minio:9000
    user: root
    depends_on:
      - prometheus
    networks:
      - tracking_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    entrypoint: |
      /bin/sh -c "
      # Wait for config directory
      while [ ! -f /tmp/ray/session_latest/metrics/grafana/grafana.ini ]; do
        echo 'Waiting for Grafana config files...'
        sleep 2
      done

      # Start Grafana with copied config
      /run.sh --config /tmp/ray/session_latest/metrics/grafana/grafana.ini"
    ports:
      - "3000:3000"
    volumes:
      - /mnt/block/grafana:/var/lib/grafana
      - /mnt/block/ray_tmp:/tmp/ray
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SERVER_HTTP_ADDR=0.0.0.0
      - GF_DATABASE_TYPE=sqlite3
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_PROXY_ENABLED=true
      - GF_AUTH_PROXY_AUTO_SIGN_UP=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 2s
      timeout: 2s
      retries: 30
      start_period: 5s
    restart: unless-stopped
    depends_on:
      - ray-head
      - prometheus
    networks:
      - tracking_network

volumes:
  grafana_storage:
  ray_tmp:
  minio_data:
  prometheus_data:

networks:
  tracking_network:
    driver: bridge